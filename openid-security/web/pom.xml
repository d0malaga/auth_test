<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>auth_test.quickstarts</groupId>
    <artifactId>openid-security</artifactId>
    <version>0.3.0</version>
    <relativePath>../pom.xml</relativePath>
  </parent>
  <artifactId>openid-security-wildfly</artifactId>
  <packaging>war</packaging>
  <name>openid-security-wildfly</name>
  <description>OPENID security: using Keycloak Elytron in Wildfly</description>
  <url>http://wildfly.org</url>

  <properties>
    <jboss_home>/opt/jboss/wildfly</jboss_home>
    <keycloak_adapter>keycloak-wildfly-adapter-dist-10.0.1.tar.gz</keycloak_adapter>
  </properties>

  <licenses>
    <license>
      <name>Apache License, Version 2.0</name>
      <url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
      <distribution>repo</distribution>
    </license>
  </licenses>

  <dependencyManagement>
    <dependencies>
      
      <dependency>
        <groupId>auth_test.quickstarts</groupId>
        <artifactId>deltaspike-authorization</artifactId>
        <version>${project.version}</version>
        <type>war</type>
        <scope>compile</scope>
      </dependency>

      <!-- Deltaspike API. We use compile scope as we need it to compile the project against the API -->
      <dependency>
        <groupId>org.apache.deltaspike.core</groupId>
        <artifactId>deltaspike-core-api</artifactId>
        <version>${version.deltaspike.core}</version>
        <scope>compile</scope>
      </dependency>

      <!-- Deltaspike Impl. We use runtime scope as we only need the implementation
           classes at runtime -->
      <dependency>
        <groupId>org.apache.deltaspike.core</groupId>
        <artifactId>deltaspike-core-impl</artifactId>
        <scope>runtime</scope>
        <version>${version.deltaspike.core}</version>
      </dependency>
      <dependency>
        <groupId>org.apache.deltaspike.modules</groupId>
        <artifactId>deltaspike-security-module-api</artifactId>
        <version>${version.deltaspike.core}</version>
      </dependency>
      <dependency>
        <groupId>org.apache.deltaspike.modules</groupId>
        <artifactId>deltaspike-security-module-impl</artifactId>
        <version>${version.deltaspike.core}</version>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>

    <dependency>
      <groupId>auth_test.quickstarts</groupId>
      <artifactId>deltaspike-authorization</artifactId>
      <type>war</type>
      <scope>compile</scope>
    </dependency>

    <!-- Import the Servlet API, we use provided scope as the API is included
         in WildFly 10 -->
    <dependency>
      <groupId>org.jboss.spec.javax.servlet</groupId>
      <artifactId>jboss-servlet-api_4.0_spec</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- Import the CDI API, we use provided scope as the API is included
         in WildFly 10 -->
    <dependency>
      <groupId>jakarta.enterprise</groupId>
      <artifactId>jakarta.enterprise.cdi-api</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- Import the Common Annotations API (JSR-250), we use provided
         scope as the API is included in WildFly -->
    <dependency>
      <groupId>org.jboss.spec.javax.annotation</groupId>
      <artifactId>jboss-annotations-api_1.3_spec</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.jboss.spec.javax.interceptor</groupId>
      <artifactId>jboss-interceptors-api_1.2_spec</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- Import the JSF API, we use provided scope as the API is included
         in WildFly -->
    <dependency>
      <groupId>org.jboss.spec.javax.faces</groupId>
      <artifactId>jboss-jsf-api_2.3_spec</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- Import the JPA API, we use provided scope as the API is included
         in WildFly -->
    <dependency>
      <groupId>jakarta.persistence</groupId>
      <artifactId>jakarta.persistence-api</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- Import the JTA API, we use provided scope as the API is included
         in WildFly -->
    <dependency>
      <groupId>org.jboss.spec.javax.transaction</groupId>
      <artifactId>jboss-transaction-api_1.3_spec</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- Import the EJB API, we use provided scope as the API is included
         in WildFly -->
    <dependency>
      <groupId>org.jboss.spec.javax.ejb</groupId>
      <artifactId>jboss-ejb-api_3.2_spec</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- Deltaspike API. We use compile scope as we need compile against its API -->
    <dependency>
      <groupId>org.apache.deltaspike.core</groupId>
      <artifactId>deltaspike-core-api</artifactId>
      <scope>compile</scope>
    </dependency>

    <!-- Deltaspike Impl. we use runtime scope as we need its implementation
         dependencies only on runtime -->
    <dependency>
      <groupId>org.apache.deltaspike.core</groupId>
      <artifactId>deltaspike-core-impl</artifactId>
      <scope>runtime</scope>
    </dependency>

    <!-- Deltaspike Security Module API. We use compile scope as we need
         to compile against its API -->
    <dependency>
      <groupId>org.apache.deltaspike.modules</groupId>
      <artifactId>deltaspike-security-module-api</artifactId>
      <scope>compile</scope>
    </dependency>

    <!-- Deltaspike Security Impl. we use runtime scope as we need its implementation
         dependencies only on runtime -->
    <dependency>
      <groupId>org.apache.deltaspike.modules</groupId>
      <artifactId>deltaspike-security-module-impl</artifactId>
      <scope>runtime</scope>
    </dependency>

    <!-- Import the PicketLink API, we deploy this as library with the application,
	 and can compile against it -->
    <dependency>
      <groupId>org.picketlink</groupId>
      <artifactId>picketlink-api</artifactId>
    </dependency>

    <!-- Import the PicketLink implementation, we deploy this as library with the application,
	 but don't compile against it -->
    <dependency>
      <groupId>org.picketlink</groupId>
      <artifactId>picketlink-impl</artifactId>
      <scope>runtime</scope>
    </dependency>

  </dependencies>

  <build>
    <finalName>${project.artifactId}</finalName>
    <plugins>
      <plugin>
        <groupId>org.wildfly.plugins</groupId>
        <artifactId>wildfly-maven-plugin</artifactId>
        <version>${version.wildfly.maven.plugin}</version>
      </plugin>
      <plugin>
        <groupId>org.eclipse.jkube</groupId>
        <artifactId>kubernetes-maven-plugin</artifactId>
        <version>${jkube.version}</version>
        <configuration>
	  <images>
	    <image>
	      <name>%a:%l</name>
	      <alias>service</alias>
	      <build>
		<from>jboss/wildfly:20.0.1.Final</from>
		<!-- default values to allow non expanded env to be inserted in
                     wf config. Consider overriding them in runtime -->
		<env>
		  <LDAP_URL>ldap://ldap-service.default.svc.cluster.local:389</LDAP_URL>
		  <LDAP_ADMIN_PASSWORD>admin</LDAP_ADMIN_PASSWORD>
                </env>
		<user>jboss</user>
		<runCmds>
		  <!-- Install wildfly adapter -->
		  <run>mv ${jboss_home}/standalone/deployments/resources ${jboss_home}/standalone/</run>
		  <run>cd ${jboss_home} &amp;&amp; tar zxf ${jboss_home}/standalone/resources/${keycloak_adapter} &amp;&amp; ${jboss_home}/bin/jboss-cli.sh --file=bin/adapter-elytron-install-offline.cli</run>
		</runCmds>
		<assembly>
		  <inline>
		    <fileSets>
		      <fileSet>
                        <directory>${project.basedir}/src/main/resources</directory>
		      </fileSet>
		    </fileSets>
                  </inline>
		  <user>jboss:jboss:jboss</user>
		  <targetDir>${jboss_home}/standalone/deployments</targetDir>
		</assembly>
	      </build>
	    </image>
	  </images>
          <resources>
            <services>
              <service>
                <type>NodePort</type>
                <name>${project.artifactId}-http</name>
                <headless>false</headless>
                <ports>
                  <port>
                    <protocol>tcp</protocol>
                    <port>8080</port>
                    <targetPort>8080</targetPort>
                  </port>
                </ports>
	      </service>
	    </services>
          </resources>
	</configuration>
      </plugin>
    </plugins>
  </build>
</project>
