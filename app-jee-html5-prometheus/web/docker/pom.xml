<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>auth_test.quickstarts</groupId>
    <artifactId>app-jee-html5-web</artifactId>
    <version>0.4.0</version>
    <relativePath>../pom.xml</relativePath>
  </parent>
  <artifactId>app-jee-html5-wildfly</artifactId>
  <packaging>war</packaging>
  <name>app-jee-html5-wildfly: docker with html5 + REST API</name>
  <description>OPENID security: using Keycloak Elytron in Wildfly</description>
  <url>http://wildfly.org</url>

  <properties>
    <jboss_home>/opt/jboss/wildfly</jboss_home>
    <keycloak_adapter>keycloak-wildfly-adapter-dist-10.0.1.tar.gz</keycloak_adapter>
  </properties>

  <licenses>
    <license>
      <name>Apache License, Version 2.0</name>
      <url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
      <distribution>repo</distribution>
    </license>
  </licenses>

  <dependencies>
    <!-- Import the CDI API, we use provided scope as the API is included in WildFly -->
    <dependency>
      <groupId>jakarta.enterprise</groupId>
      <artifactId>jakarta.enterprise.cdi-api</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- Import the Common Annotations API (JSR-250), we use provided scope
         as the API is included in WildFly -->
    <dependency>
      <groupId>org.jboss.spec.javax.annotation</groupId>
      <artifactId>jboss-annotations-api_1.3_spec</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- Import the Servlet API, we use provided scope as the API is included in WildFly -->
    <dependency>
      <groupId>org.jboss.spec.javax.servlet</groupId>
      <artifactId>jboss-servlet-api_4.0_spec</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- Import the MicroProfile Metrics API, we use provided scope as the API is included in the server -->
    <dependency>
      <groupId>org.eclipse.microprofile.metrics</groupId>
      <artifactId>microprofile-metrics-api</artifactId>
      <scope>provided</scope>
    </dependency>
  </dependencies>

  <build>
    <finalName>${project.artifactId}</finalName>
    <plugins>
      <plugin>
        <groupId>org.wildfly.plugins</groupId>
        <artifactId>wildfly-maven-plugin</artifactId>
        <version>${version.wildfly.maven.plugin}</version>
      </plugin>
      <plugin>
        <groupId>org.eclipse.jkube</groupId>
        <artifactId>kubernetes-maven-plugin</artifactId>
        <version>${jkube.version}</version>
        <configuration>
          <registry>${docker.registry}</registry>
	  <images>
	    <image>
	      <name>${docker.path}%a:%l</name>
	      <alias>service</alias>
	      <build>
		<from>jboss/wildfly:${wildfly.version}</from>
		<!-- default values to allow non expanded env to be inserted in
                     wf config. Consider overriding them in runtime -->
		<env>
		  <IDP_URL>http://external-ip:8081/auth</IDP_URL>
                </env>
		<user>jboss</user>
		<cmd>
		  <shell>/opt/jboss/wildfly/bin/standalone.sh -b  0.0.0.0 -bmanagement 0.0.0.0 -Dwildfly.statistics-enabled=true -Dopenid.IDP_URL=$IDP_URL</shell>
		</cmd>
		<runCmds>
		  <!-- Install wildfly admin -->
		  <run>${jboss_home}/bin/add-user.sh -u 'admin' -p 'abcd123' -g 'admin'</run>
		  <!-- Install keycloak adapter -->
		  <run>mv ${jboss_home}/standalone/deployments/resources ${jboss_home}/standalone/</run>
		  <run>cd ${jboss_home} &amp;&amp; tar zxf ${jboss_home}/standalone/resources/${keycloak_adapter} &amp;&amp; ${jboss_home}/bin/jboss-cli.sh --file=bin/adapter-elytron-install-offline.cli</run>
		</runCmds>
		<assembly>
		  <inline>
		    <fileSets>
		      <fileSet>
                        <directory>${project.basedir}/src/main/cli</directory>
		      </fileSet>
		      <fileSet>
                        <directory>${project.basedir}/src/main/resources</directory>
		      </fileSet>
		    </fileSets>
		    <files>
		      <file>
                        <source>
                          ${project.basedir}/../rest/target/service-jee-jaxrs.war
                        </source>
                        <outputDirectory>.</outputDirectory>
                      </file>
		      <file>
                        <source>
                          ${project.basedir}/../html5/target/app-html5.war
                        </source>
                        <outputDirectory>.</outputDirectory>
                      </file>
		    </files>
                  </inline>
		  <user>jboss:jboss:jboss</user>
		  <targetDir>${jboss_home}/standalone/deployments</targetDir>
		</assembly>
                <ports>
		  <port>8080</port>
		  <port>9990</port>
                </ports>
	      </build>
	    </image>
	  </images>
          <resources>
            <services>
              <service>
                <type>NodePort</type>
                <name>${project.artifactId}</name>
                <headless>false</headless>
                <ports>
                  <port>
                    <name>${project.artifactId}-http</name>
                    <protocol>tcp</protocol>
                    <port>8080</port>
                    <targetPort>8080</targetPort>
                    <nodePort>31080</nodePort>
                  </port>
                  <port>
                    <name>${project.artifactId}-metrics</name>
                    <protocol>tcp</protocol>
                    <port>9990</port>
                    <targetPort>9990</targetPort>
                  </port>
                </ports>
	      </service>
	    </services>
          </resources>
	</configuration>
      </plugin>
    </plugins>
  </build>
</project>
